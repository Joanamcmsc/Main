from gettext import install
import pip
from twilio.rest import Client # type: ignore
import logging
import time
import mercadopago # type: ignore
pip install twilio # type: ignore

# Configurações
TWILIO_ACCOUNT_SID = "AC71b1f4f930608343f2205b338c3a61fb"
TWILIO_AUTH_TOKEN = "6ea23469ac026321bf4f243c598dbea6"
TWILIO_WHATSAPP_NUMBER = "whatsapp:+5548988224533"  # Número padrão do WhatsApp Sandbox do Twilio
ADMIN_WHATSAPP_NUMBER = "whatsapp:+5548988224533"  # Seu número verificado

CHAVE_PIX_FIXA = "sua_chave_pix_aqui"
MERCADO_PAGO_EMAIL = "seu_email_mercadopago@gmail.com"
ACCESS_TOKEN_MP = "SEU_ACCESS_TOKEN_DO_MERCADO_PAGO"

mp = mercadopago.SDK(ACCESS_TOKEN_MP)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

produtos = []
compras_pendentes = {}

client = Client(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN)

def enviar_mensagem(numero, mensagem):
    client.messages.create(
        body=mensagem,
        from_=TWILIO_WHATSAPP_NUMBER,
        to=numero
    )

def start(numero):
    mensagem = "Bem-vindo à Innova! Use 'listar' para ver os produtos disponíveis."
    enviar_mensagem(numero, mensagem)

def listar_produtos(numero):
    if not produtos:
        enviar_mensagem(numero, "Nenhum produto disponível.")
        return
    
    mensagem = ""
    for idx, produto in enumerate(produtos, start=1):
        mensagem += f"{idx}. {produto['nome']}\nDescrição: {produto['descricao']}\nPreço: R$ {produto['preco']:.2f}\n\n"
    enviar_mensagem(numero, mensagem)

def adicionar_produto(numero):
    enviar_mensagem(numero, "Envie o nome do produto:")
    # Aqui, você precisa gerenciar o estado da conversa, utilizando armazenamento de estado para rastrear a etapa atual

def receber_nome_produto(numero, nome):
    # Armazena o nome do produto temporariamente e solicita a descrição
    # Aqui, você deve gerenciar o armazenamento de dados por usuário
    enviar_mensagem(numero, "Envie a descrição do produto:")

def processar_compra(numero, idx_produto):
    produto = produtos[idx_produto - 1]
    pagamento_id = criar_pagamento(produto)
    compras_pendentes[numero] = {"produto": produto, "pagamento_id": pagamento_id, "inicio": time.time()}
    
    mensagem = f"Por favor, pague R$ {produto['preco']:.2f} usando a chave Pix: {CHAVE_PIX_FIXA}\nID do Pagamento: {pagamento_id}"
    enviar_mensagem(numero, mensagem)

def criar_pagamento(produto):
    pagamento_data = {
        "transaction_amount": produto['preco'],
        "description": produto['nome'],
        "payment_method_id": "pix",
        "payer": {
            "email": MERCADO_PAGO_EMAIL
        }
    }
    pagamento = mp.payment().create(pagamento_data)
    return pagamento['response']['id']

def verificar_pagamento(numero, pagamento_id):
    status = verificar_status_pagamento(pagamento_id)

    if status == "approved":
        if numero in compras_pendentes:
            produto = compras_pendentes[numero]["produto"]
            item = produto["item"]

            # Enviar o produto
            if isinstance(item, str):
                enviar_mensagem(numero, f"Seu produto: {item}")
            else:
                enviar_mensagem(numero, "Pagamento confirmado! Produto entregue.")
            del compras_pendentes[numero]
        else:
            enviar_mensagem(numero, "Erro: Compra não encontrada.")
    else:
        enviar_mensagem(numero, "Pagamento ainda não confirmado. Tente novamente em alguns minutos.")

def verificar_status_pagamento(pagamento_id):
    payment_info = mp.payment().get(pagamento_id)
    return payment_info["response"]["status"]

# Função principal simulada para chamadas via WhatsApp
def receber_mensagem(whatsapp_numero, mensagem):
    if mensagem.lower() == 'start':
        start(whatsapp_numero)
    elif mensagem.lower() == 'listar':
        listar_produtos(whatsapp_numero)
    # Adicionar mais condições conforme o fluxo de mensagens

# Simulação de recebimento de mensagens (Você pode usar um framework Flask ou Django para integrar com a Webhook do Twilio)
def main():
    numero_teste = ADMIN_WHATSAPP_NUMBER  # Teste com seu número de WhatsApp
    receber_mensagem(numero_teste, "start")
    receber_mensagem(numero_teste, "listar")

if __name__ == "__main__":
    main()
heroku buildpacks:set heroku/python
